BEGIN;

DROP TABLE IF EXISTS
	security_lookup.system_privilege_type;

DROP TABLE IF EXISTS
	security_lookup.valid_object_privileges;

DROP TABLE IF EXISTS
	security_lookup.privilege_type;

CREATE TABLE security_lookup.privilege_type (
	privilege_code CHAR(1) PRIMARY KEY,
	privilege_type TEXT    UNIQUE NOT NULL
);

CREATE TABLE security_lookup.securable_object_type(
	object_type TEXT    PRIMARY KEY
);

CREATE TABLE security_lookup.valid_object_privilege(
	object_type    TEXT NOT NULL REFERENCES security_lookup.securable_object_type,
	privilege_type TEXT NOT NULL REFERENCES security_lookup.privilege_type(privilege_type),
	PRIMARY KEY(object_type, privilege_type)
);

COPY security_lookup.securable_object_type FROM stdin;
AGGREGATE
COLUMN
DATABASE
DOMAIN
FOREIGN DATA WRAPPER
FOREIGN SERVER
FUNCTION
LANGUAGE
LARGE OBJECT
MATERIALIZED VIEW
PARAMETER
PROCEDURE
PUBLICATION
ROLE
SCHEMA
SEQUENCE
SUBSCRIPTION
TABLE
TABLESPACE
TYPE
VIEW
\.

COPY security_lookup.privilege_type (privilege_code, privilege_type) FROM stdin;
r	SELECT
a	INSERT
w	UPDATE
d	DELETE
D	TRUNCATE
x	REFERENCES
t	TRIGGER
C	CREATE
c	CONNECT
T	TEMPORARY
X	EXECUTE
U	USAGE
s	SET
A	ALTER SYSTEM
m	MAINTAIN
\.

COPY security_lookup.valid_object_privilege (object_type, privilege_type) FROM stdin;
COLUMN	INSERT
COLUMN	REFERENCES
COLUMN	SELECT
COLUMN	UPDATE
DATABASE	CONNECT
DATABASE	CREATE
DATABASE	TEMPORARY
DOMAIN	USAGE
FOREIGN DATA WRAPPER	USAGE
FOREIGN SERVER	USAGE
FUNCTION	EXECUTE
LANGUAGE	USAGE
LARGE OBJECT	SELECT
LARGE OBJECT	UPDATE
PARAMETER	ALTER SYSTEM
PARAMETER	SET
PROCEDURE	EXECUTE
SCHEMA	CREATE
SCHEMA	USAGE
SEQUENCE	SELECT
SEQUENCE	UPDATE
SEQUENCE	USAGE
TABLE	DELETE
TABLE	INSERT
TABLE	MAINTAIN
TABLE	REFERENCES
TABLE	SELECT
TABLE	TRIGGER
TABLE	TRUNCATE
TABLE	UPDATE
TABLESPACE	CREATE
TYPE	USAGE
\.

COMMIT;
